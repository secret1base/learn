package leetcode;

import java.util.Arrays;

/**
 * 268. 缺失数字
 * @author: wyj
 * @date: 2021/06/29
 */
public class A268_MissingNumber {
    /**
     * 给定一个包含 [0, n] 中 n 个数的数组 nums ，找出 [0, n] 这个范围内没有出现在数组中的那个数。
     *  进阶：
     *  你能否实现线性时间复杂度、仅使用额外常数空间的算法解决此问题?
     *  示例 1：
     * 输入：nums = [3,0,1]
     * 输出：2
     * 解释：n = 3，因为有 3 个数字，所以所有的数字都在范围 [0,3] 内。2 是丢失的数字，因为它没有出现在 nums 中。
     *  示例 2：
     * 输入：nums = [0,1]
     * 输出：2
     * 解释：n = 2，因为有 2 个数字，所以所有的数字都在范围 [0,2] 内。2 是丢失的数字，因为它没有出现在 nums 中。
     *  示例 3：
     * 输入：nums = [9,6,4,2,3,5,7,0,1]
     * 输出：8
     * 解释：n = 9，因为有 9 个数字，所以所有的数字都在范围 [0,9] 内。8 是丢失的数字，因为它没有出现在 nums 中。
     *  示例 4：
     * 输入：nums = [0]
     * 输出：1
     * 解释：n = 1，因为有 1 个数字，所以所有的数字都在范围 [0,1] 内。1 是丢失的数字，因为它没有出现在 nums 中。
     *
     * 解题思路
     * 因为范围是[0,n]长度是n，所以排序后哪个对应位置的值不一致就是哪个没出现，如果都没有那就是n本身没有
     * 			执行耗时:6 ms,击败了30.33% 的Java用户
     * 			内存消耗:38.6 MB,击败了87.88% 的Java用户
     */
    public int missingNumber(int[] nums) {
        Arrays.sort(nums);
        for (int i = 0; i < nums.length; i++) {
            if(nums[i]!=i){
                return i;
            }
        }
        return nums.length;
    }
}
